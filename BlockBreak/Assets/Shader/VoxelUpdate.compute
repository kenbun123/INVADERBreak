// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Update

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct VoxelData
{
	int id;
	bool active;
	bool isHit;
	float3 position;
	float3 rotation;
	float3 scale;

};

float _DeltaTime;
float3 _Scale;

RWStructuredBuffer<VoxelData> _VoxelData;
[numthreads(8,1,1)]
void Update(uint id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!
	VoxelData data = _VoxelData[id];

	//Activeじゃない物のScaleをゼロにする
	//if (data.active)
	//{
	//	data.scale = _Scale;
	//}
	//else {
	//	data.scale = float3(0, 0, 0);

	//	_VoxelData[id] = data;
	//	return;
	//}

	//if (!data.isHit) return;
	//
	//data.time += _DeltaTime;
	//data.position += data.velocity * _DeltaTime;
	//data.velocity.y += -9.8 * _DeltaTime;
	//data.rotation += data.angVelocity * _DeltaTime;
	//data.scale = (1.0 - pow(data.time / data.lifeTime, 3.0)) * 0.1;
	//
	//if (data.time < data.lifeTime) {
	//	data.active = false;
	//}



	_VoxelData[id] = data;

}
